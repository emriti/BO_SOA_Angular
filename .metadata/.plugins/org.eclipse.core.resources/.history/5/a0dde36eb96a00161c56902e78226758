package api.services;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.print.attribute.standard.Media;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.JSONException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import bo.services.ReconcilliationService;

@Path("/reconcilliation_service")
public class ReconcilliationApiService {

	@GET
	@Path("/recon")
	@Produces(MediaType.APPLICATION_JSON)
	public Response get() throws JSONException, JsonProcessingException {
		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		ObjectMapper mapper = new ObjectMapper();
		mapper.setDateFormat(df);
		String result = mapper.writeValueAsString((new ReconcilliationService()).findAll());
		return Response.status(200).entity(result).build();
	}

	@GET
	@Path("/recon/{reconNo}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getByReconNo(@PathParam("reconNo") String reconNo) throws JSONException, JsonProcessingException {
		ObjectMapper mapper = new ObjectMapper();
		String result = mapper.writeValueAsString((new ReconcilliationService().findByReconNo(reconNo)));
		return Response.status(200).entity(result).build();
	}

	@POST
	@Path("/recon")
	@Produces(MediaType.TEXT_PLAIN)
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN })
	public Response insert(@FormParam("reconcileNo") String reconcileNo, @FormParam("reconcileDate") Date reconcileDate,
			@FormParam("paymentTypeId") int paymentTypeId, @FormParam("balanceSnapshot") double balanceSnapshot,
			@FormParam("nextPaymentAmount") double nextPaymentAmount,
			@FormParam("penihilanAmount") double penihilanAmount, @FormParam("createdBy") String createdBy,
			@Context HttpServletResponse servletResponse) {
		try {
			(new ReconcilliationService()).insert(reconcileNo, reconcileDate, paymentTypeId, balanceSnapshot,
					nextPaymentAmount, penihilanAmount, createdBy);
			return Response.status(200).entity("Success!").build();
		} catch (Exception e) {
			return Response.status(404).entity("Failed, " + e.getMessage()).build();
		}
	}

	@PUT
	@Path("/recon")
	@Produces(MediaType.TEXT_PLAIN)
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN })
	public Response insert(@FormParam("reconcileNo") String reconcileNo,
			@FormParam("balanceSnapshot") double balanceSnapshot,
			@FormParam("nextPaymentAmount") double nextPaymentAmount,
			@FormParam("penihilanAmount") double penihilanAmount, @Context HttpServletResponse servletResponse) {
		try {
			(new ReconcilliationService()).insert(reconcileNo, reconcileDate, paymentTypeId, balanceSnapshot,
					nextPaymentAmount, penihilanAmount, createdBy);
			return Response.status(200).entity("Success!").build();
		} catch (Exception e) {
			return Response.status(404).entity("Failed, " + e.getMessage()).build();
		}
	}

	@DELETE
	@Path("/recon/{reconNo}")
	@Produces(MediaType.TEXT_PLAIN)
	public Response delete(@PathParam("reconNo") String reconNo) {
		try {
			(new ReconcilliationService()).delete(reconNo);
			return Response.status(200).entity("Success!").build();
		} catch (Exception e) {
			return Response.status(404).entity("Failed, " + e.getMessage()).build();
		}
	}

}
